#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para fazer upload de v√≠deo grande (>25MB) para GitHub usando Git LFS
Autor: Assistente Claude
"""

import os
import subprocess
import sys
import shutil
import tempfile
import logging
from datetime import datetime
from pathlib import Path

def setup_logging():
    """Configura o sistema de logging"""
    log_filename = f"upload_video_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    
    # Configura√ß√£o do logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logger = logging.getLogger(__name__)
    logger.info(f"=== IN√çCIO DO LOG - Upload de V√≠deo para GitHub ===")
    logger.info(f"Arquivo de log: {log_filename}")
    
    return logger, log_filename

def run_command(command, cwd=None, check=True):
    """Executa um comando no terminal e retorna o resultado"""
    logger = logging.getLogger(__name__)
    logger.info(f"Executando comando: {command}")
    if cwd:
        logger.info(f"Diret√≥rio de trabalho: {cwd}")
    
    try:
        # No Windows, usar shell=True pode causar problemas com aspas
        # Vamos usar uma abordagem mais robusta
        if os.name == 'nt':  # Windows
            result = subprocess.run(
                command, 
                shell=True, 
                cwd=cwd, 
                capture_output=True, 
                text=True, 
                check=check
            )
        else:  # Unix/Linux/macOS
            result = subprocess.run(
                command, 
                shell=True, 
                cwd=cwd, 
                capture_output=True, 
                text=True, 
                check=check
            )
        
        if result.stdout:
            logger.info(f"STDOUT: {result.stdout.strip()}")
            print(f"‚úì {result.stdout.strip()}")
        
        if result.stderr and result.stderr.strip():
            logger.warning(f"STDERR: {result.stderr.strip()}")
        
        logger.info(f"Comando executado com sucesso. C√≥digo de sa√≠da: {result.returncode}")
        return result
        
    except subprocess.CalledProcessError as e:
        logger.error(f"Erro ao executar comando: {command}")
        logger.error(f"C√≥digo de sa√≠da: {e.returncode}")
        logger.error(f"STDOUT: {e.stdout}")
        logger.error(f"STDERR: {e.stderr}")
        print(f"‚úó Erro ao executar: {command}")
        print(f"‚úó {e.stderr}")
        raise

def check_git_lfs():
    """Verifica se o Git LFS est√° instalado"""
    logger = logging.getLogger(__name__)
    logger.info("Verificando se Git LFS est√° instalado...")
    
    try:
        run_command("git lfs version")
        logger.info("Git LFS est√° dispon√≠vel")
        return True
    except subprocess.CalledProcessError:
        logger.error("Git LFS n√£o est√° instalado!")
        print("‚úó Git LFS n√£o est√° instalado!")
        print("üìã Para instalar:")
        print("   Windows: Baixe de https://git-lfs.github.io/")
        print("   macOS: brew install git-lfs")
        print("   Ubuntu/Debian: sudo apt install git-lfs")
        return False

def upload_video_to_github():
    """Fun√ß√£o principal para upload do v√≠deo"""
    logger = logging.getLogger(__name__)
    
    # Configura√ß√µes
    VIDEO_FILE = "vid2.mp4"
    REPO_URL = "https://github.com/gabrielalmeidac3/violaocomgabriel.git"
    COMMIT_MESSAGE = "Adicionar v√≠deo vid2.mp4 via Git LFS"
    
    logger.info(f"Iniciando upload do arquivo: {VIDEO_FILE}")
    logger.info(f"Reposit√≥rio de destino: {REPO_URL}")
    
    # Verifica se o arquivo de v√≠deo existe
    if not os.path.exists(VIDEO_FILE):
        logger.error(f"Arquivo {VIDEO_FILE} n√£o encontrado no diret√≥rio atual!")
        logger.error(f"Diret√≥rio atual: {os.getcwd()}")
        print(f"‚úó Arquivo {VIDEO_FILE} n√£o encontrado no diret√≥rio atual!")
        print(f"üìÅ Diret√≥rio atual: {os.getcwd()}")
        return False
    
    # Verifica o tamanho do arquivo
    file_size = os.path.getsize(VIDEO_FILE) / (1024 * 1024)  # MB
    logger.info(f"Tamanho do arquivo: {file_size:.2f} MB")
    print(f"üìä Tamanho do arquivo: {file_size:.2f} MB")
    
    # Verifica se Git LFS est√° instalado
    if not check_git_lfs():
        return False
    
    # Cria pasta tempor√°ria
    temp_dir = tempfile.mkdtemp(prefix="github_upload_")
    logger.info(f"Pasta tempor√°ria criada: {temp_dir}")
    print(f"üìÅ Pasta tempor√°ria criada: {temp_dir}")
    
    try:
        logger.info("Iniciando processo de upload...")
        print("\nüîÑ Iniciando processo de upload...")
        
        # Clone do reposit√≥rio
        logger.info("Passo 1: Clonando reposit√≥rio...")
        print("1Ô∏è‚É£ Clonando reposit√≥rio...")
        run_command(f"git clone {REPO_URL} .", cwd=temp_dir)
        
        # Navega para o diret√≥rio clonado
        repo_dir = os.path.join(temp_dir, "violaocomgabriel")
        if not os.path.exists(repo_dir):
            # Se n√£o existe subpasta, o clone foi feito no diret√≥rio raiz
            repo_dir = temp_dir
            logger.info("Clone feito no diret√≥rio raiz da pasta tempor√°ria")
        else:
            logger.info(f"Diret√≥rio do reposit√≥rio: {repo_dir}")
        
        # Lista conte√∫do do diret√≥rio clonado
        logger.info(f"Conte√∫do do diret√≥rio clonado: {os.listdir(repo_dir)}")
        
        # Inicializa Git LFS no reposit√≥rio
        logger.info("Passo 2: Configurando Git LFS...")
        print("2Ô∏è‚É£ Configurando Git LFS...")
        run_command("git lfs install", cwd=repo_dir)
        
        # Adiciona tracking para arquivos .mp4
        logger.info("Configurando tracking para arquivos .mp4...")
        run_command("git lfs track '*.mp4'", cwd=repo_dir)
        
        # Adiciona .gitattributes se foi criado
        gitattributes_path = os.path.join(repo_dir, ".gitattributes")
        if os.path.exists(gitattributes_path):
            logger.info("Arquivo .gitattributes encontrado, adicionando ao commit...")
            run_command("git add .gitattributes", cwd=repo_dir)
            run_command('git commit -m "Adicionar Git LFS tracking para arquivos .mp4"', cwd=repo_dir)
        else:
            logger.warning("Arquivo .gitattributes n√£o foi criado")
        
        # Copia o v√≠deo para o reposit√≥rio
        logger.info("Passo 3: Copiando v√≠deo...")
        print("3Ô∏è‚É£ Copiando v√≠deo...")
        video_dest = os.path.join(repo_dir, VIDEO_FILE)
        shutil.copy2(VIDEO_FILE, video_dest)
        logger.info(f"V√≠deo copiado de {VIDEO_FILE} para {video_dest}")
        print(f"‚úì V√≠deo copiado para: {video_dest}")
        
        # Verifica se o arquivo foi copiado corretamente
        if os.path.exists(video_dest):
            dest_size = os.path.getsize(video_dest) / (1024 * 1024)
            logger.info(f"Arquivo copiado com sucesso. Tamanho: {dest_size:.2f} MB")
        else:
            logger.error("Falha ao copiar o arquivo!")
            return False
        
        # Adiciona o arquivo ao Git
        logger.info("Passo 4: Adicionando arquivo ao Git...")
        print("4Ô∏è‚É£ Adicionando arquivo ao Git...")
        run_command(f"git add {VIDEO_FILE}", cwd=repo_dir)
        
        # Verifica status do Git
        logger.info("Verificando status do Git...")
        run_command("git status", cwd=repo_dir)
        
        # Commit
        logger.info("Passo 5: Fazendo commit...")
        print("5Ô∏è‚É£ Fazendo commit...")
        run_command(f'git commit -m "Adicionar v√≠deo {VIDEO_FILE} via Git LFS"', cwd=repo_dir)
        
        # Push para o GitHub
        logger.info("Passo 6: Enviando para GitHub...")
        print("6Ô∏è‚É£ Enviando para GitHub...")
        print("‚ö†Ô∏è  Voc√™ pode precisar inserir suas credenciais do GitHub")
        run_command("git push origin main", cwd=repo_dir)
        
        logger.info("Upload conclu√≠do com sucesso!")
        print("\nüéâ Upload conclu√≠do com sucesso!")
        print(f"üîó Verifique em: {REPO_URL.replace('.git', '')}")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro durante o upload: {str(e)}", exc_info=True)
        print(f"\n‚úó Erro durante o upload: {str(e)}")
        return False
        
    finally:
        # Remove pasta tempor√°ria
        logger.info(f"Removendo pasta tempor√°ria: {temp_dir}")
        print(f"\nüßπ Removendo pasta tempor√°ria: {temp_dir}")
        try:
            # No Windows, √†s vezes h√° arquivos bloqueados pelo Git
            # Vamos tentar v√°rias vezes com delay
            import time
            for attempt in range(3):
                try:
                    shutil.rmtree(temp_dir)
                    logger.info("Pasta tempor√°ria removida com sucesso")
                    print("‚úì Pasta tempor√°ria removida")
                    break
                except PermissionError:
                    if attempt < 2:
                        logger.warning(f"Tentativa {attempt + 1} falhou, tentando novamente em 2 segundos...")
                        time.sleep(2)
                    else:
                        raise
        except Exception as e:
            logger.error(f"Erro ao remover pasta tempor√°ria: {e}")
            print(f"‚ö†Ô∏è  Erro ao remover pasta tempor√°ria: {e}")
            print(f"üìÅ Pasta deixada em: {temp_dir}")
            print("   Voc√™ pode remov√™-la manualmente depois")

def main():
    """Fun√ß√£o principal"""
    # Configura o sistema de logging
    logger, log_filename = setup_logging()
    
    print("üé¨ Upload de V√≠deo para GitHub com Git LFS")
    print("=" * 50)
    logger.info("Aplica√ß√£o iniciada")
    
    # Verifica se est√° no diret√≥rio correto
    current_dir = os.getcwd()
    logger.info(f"Diret√≥rio atual: {current_dir}")
    print(f"üìÅ Diret√≥rio atual: {current_dir}")
    
    # Lista arquivos no diret√≥rio
    try:
        files = [f for f in os.listdir('.') if os.path.isfile(f)]
        logger.info(f"Arquivos encontrados: {files}")
        print(f"üìã Arquivos encontrados: {', '.join(files)}")
    except Exception as e:
        logger.error(f"Erro ao listar arquivos: {e}")
        print(f"‚úó Erro ao listar arquivos: {e}")
    
    # Informa√ß√µes do sistema
    logger.info(f"Sistema operacional: {os.name}")
    logger.info(f"Python: {sys.version}")
    
    print(f"üìÑ Arquivo de log: {log_filename}")
    
    # Confirma√ß√£o
    response = input("\n‚ùì Deseja continuar com o upload? (s/n): ").lower().strip()
    logger.info(f"Resposta do usu√°rio: {response}")
    
    if response not in ['s', 'sim', 'y', 'yes']:
        logger.info("Upload cancelado pelo usu√°rio")
        print("‚ùå Upload cancelado pelo usu√°rio")
        return
    
    # Executa upload
    logger.info("Iniciando processo de upload...")
    success = upload_video_to_github()
    
    if success:
        logger.info("Processo conclu√≠do com sucesso!")
        print("\n‚úÖ Processo conclu√≠do com sucesso!")
        print(f"üìÑ Log detalhado salvo em: {log_filename}")
    else:
        logger.error("Processo falhou")
        print("\n‚ùå Processo falhou. Verifique os erros acima.")
        print(f"üìÑ Log detalhado salvo em: {log_filename}")
        sys.exit(1)
    
    logger.info("=== FIM DO LOG ===")

if __name__ == "__main__":
    main()